<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_DestinationDataStore" Id="{95d6d775-de95-4d9d-948d-6053fdff2857}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DestinationDataStore
VAR_INPUT
    {attribute 'pytmc' := 'pv: Name; io: input'}
    sName : STRING;
    {attribute 'pytmc' := 'pv: DestValve'}
    fbDestinationValve : REFERENCE TO FB_VGC;

    {attribute 'pytmc' := '
        pv: ExitValveReady
        io: input
        field: ZNAM Not ready
        field: ONAM Ready
        field: ZSV MAJOR
        field: OSV NO_ALARM
    '}
    bExitValveReady : BOOL;

    {attribute 'pytmc' := 'pv: SRC'}
	stSourceDataStore : ARRAY [1..GVL_BTPS_Constants.nSources] OF DUT_SourceDataStore;
END_VAR
VAR_OUTPUT
    // 
    bDataValid : BOOL;
END_VAR
VAR
    nIndex : UINT;
    stSource: REFERENCE TO DUT_SourceDataStore;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[bExitValveReady := F_IsValveReady(fbDestinationValve);

Update(
    stDataSource:=stSourceDataStore[1],
    sName:='Source 1',
    fbSourceValve:=GVL_BTPS.fbBay1SourceValve,
    fbLinear:=GVL_BTPS.fbBay1Linear,
    fbRotary:=GVL_BTPS.fbBay1Rotary,
    fbGoniometer:=GVL_BTPS.fbBay1Goniometer,
    fbNearField:=GVL_BTPS.fbBay1NearFieldCamStats,
    fbFarField:=GVL_BTPS.fbBay1FarFieldCamStats
);

// Future use:
(*
Update(
    stDataSource:=stSourceDataStore2,
    sName:='Source 2',
    fbSourceValve:=GVL_BTPS.fbBay2SourceValve,
    fbLinear:=GVL_BTPS.fbBay2Linear,
    fbRotary:=GVL_BTPS.fbBay2Rotary,
    fbGoniometer:=GVL_BTPS.fbBay2Goniometer,
    fbNearField:=GVL_BTPS.fbBay2NearFieldCamStats,
    fbFarField:=GVL_BTPS.fbBay2FarFieldCamStats
);
*)

Update(
    stDataSource:=stSourceDataStore[3],
    sName:='Source 3',
    fbSourceValve:=GVL_BTPS.fbBay3SourceValve,
    fbLinear:=GVL_BTPS.fbBay3Linear,
    fbRotary:=GVL_BTPS.fbBay3Rotary,
    fbGoniometer:=GVL_BTPS.fbBay3Goniometer,
    fbNearField:=GVL_BTPS.fbBay3NearFieldCamStats,
    fbFarField:=GVL_BTPS.fbBay3FarFieldCamStats
);

Update(
    stDataSource:=stSourceDataStore[4],
    sName:='Source 4',
    fbSourceValve:=GVL_BTPS.fbBay4SourceValve,
    fbLinear:=GVL_BTPS.fbBay4Linear,
    fbRotary:=GVL_BTPS.fbBay4Rotary,
    fbGoniometer:=GVL_BTPS.fbBay4Goniometer,
    fbNearField:=GVL_BTPS.fbBay4NearFieldCamStats,
    fbFarField:=GVL_BTPS.fbBay4FarFieldCamStats
);
]]></ST>
    </Implementation>
    <Method Name="Update" Id="{99a0d2c7-b05c-4070-8558-74c8b8a2c372}">
      <Declaration><![CDATA[METHOD Update : BOOL
VAR_INPUT
    sName : STRING;
END_VAR
VAR_IN_OUT
    // The data source to update
    stDataSource : DUT_SourceDataStore;

    // The source information
    fbSourceValve : FB_VGC;
    fbNearField : FB_EpicsCentroidMonitor;
    fbFarField : FB_EpicsCentroidMonitor;
    fbLinear : FB_EpicsMotorMonitor;
    fbRotary : FB_EpicsMotorMonitor;
    fbGoniometer : FB_EpicsMotorMonitor;

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stDataSource.sName := sName;
stDataSource.fbSourceValve REF= fbSourceValve;

stDataSource.bEntryValveReady := F_IsValveReady(fbSourceValve);

(* Update range comparisons with their source values *)
(* Cameras *)
stDataSource.fbNFCentroidX.fValue := fbNearField.fCentroidX;
stDataSource.fbNFCentroidX.bInputValid := fbNearField.bValid AND fbNearField.bIsUpdating;
stDataSource.fbNFCentroidY.fValue := fbNearField.fCentroidY;
stDataSource.fbNFCentroidY.bInputValid := fbNearField.bValid AND fbNearField.bIsUpdating;
stDataSource.fbFFCentroidX.fValue := fbFarField.fCentroidX;
stDataSource.fbFFCentroidX.bInputValid := fbFarField.bValid AND fbFarField.bIsUpdating;
stDataSource.fbFFCentroidY.fValue := fbFarField.fCentroidY;
stDataSource.fbFFCentroidY.bInputValid := fbFarField.bValid AND fbFarField.bIsUpdating;

(* Motors *)
stDataSource.fbLinear.fValue := fbLinear.fPosition;
stDataSource.fbLinear.bInputValid := fbLinear.bValid AND fbLinear.stMSTA.bHomed;
stDataSource.fbRotary.fValue := fbRotary.fPosition;
stDataSource.fbRotary.bInputValid := fbRotary.bValid AND fbRotary.stMSTA.bHomed;
stDataSource.fbGoniometer.fValue := fbGoniometer.fPosition;
stDataSource.fbGoniometer.bInputValid := fbGoniometer.bValid AND fbGoniometer.stMSTA.bHomed;

(* Run the range comparisons *)
stDataSource.fbNFCentroidX();
stDataSource.fbNFCentroidY();
stDataSource.fbFFCentroidX();
stDataSource.fbFFCentroidY();
stDataSource.fbLinear();
stDataSource.fbRotary();
stDataSource.fbGoniometer();

(* Data is valid overall if *all* range comparisons say so *)
stDataSource.bDataValid := (
    stDataSource.fbNFCentroidX.bInputValid AND
    stDataSource.fbNFCentroidY.bInputValid AND
    stDataSource.fbFFCentroidX.bInputValid AND
    stDataSource.fbFFCentroidY.bInputValid AND
    stDataSource.fbLinear.bInputValid AND
    stDataSource.fbRotary.bInputValid AND
    stDataSource.fbGoniometer.bInputValid AND
    TRUE
);

(* Checks only pass if data is valid and all comparisons are true *)
stDataSource.bChecksOK := (
    stDataSource.bDataValid AND
    stDataSource.fbNFCentroidX.bInRange AND
    stDataSource.fbNFCentroidY.bInRange AND
    stDataSource.fbFFCentroidX.bInRange AND
    stDataSource.fbFFCentroidY.bInRange AND
    stDataSource.fbLinear.bInRange AND
    stDataSource.fbRotary.bInRange AND
    stDataSource.fbGoniometer.bInRange AND
    stDataSource.bEntryValveReady AND
    bExitValveReady AND
    TRUE
);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>